package ${packagePath};

<#if parent??>import ${parent.canonicalName};</#if>

<#if concrete>
<#if description.params??>
<#list description.params as param>import ${param.type.canonicalName};
</#list>
<#else>
import ${description.generator.type.canonicalName};
</#if>
</#if>

<#if root??>
import ${root.packagePath}.ErrorCode;
<#if common>
import ${root.exception.canonicalName}.ExceptionType;
</#if>
<#else>
import ${packagePath}.${exceptionName}.ExceptionType;
</#if>

/**
* Autogenerated by XGen on ${currentDate}.
*/
public abstract class ${name} <#if parent??>extends ${parent.name} </#if>{

    public static final ErrorCode CODE = new ErrorCode("${code.name}"<#if code.number??>, ${code.number}</#if><#if parent??>, ${parent.name}.CODE</#if>);

<#if concrete>
    <#if description.format??>
    private static String MESSAGE_FORMAT = "${description.format}";

    private static String createMessage(<#list description.params as param>${param.type.name} ${param.name}<#if param_has_next>, </#if></#list>) {
        return String.format(MESSAGE_FORMAT<#list description.params as param>, ${param.name}</#list>);
    }

    public static void throwException(<#list description.params as param>${param.type.name} ${param.name}<#if param_has_next>, </#if></#list>) {
        <#list description.params as param>
        if(${param.name} == null) throw new NullPointerException("${param.name}");
        </#list>

        throw new ${exceptionName}(createMessage(<#list description.params as param>${param.name}<#if param_has_next>, </#if></#list>));
    }

    <#if common>
    public static void throwException(ExceptionType exceptionType<#list description.params as param>, ${param.type.name} ${param.name}</#list>) {
        throwExceptionForCommonError(exceptionType, createMessage(<#list description.params as param>${param.name}<#if param_has_next>, </#if></#list>));
    }
    </#if>
    <#else>
    private static String createMessage(${description.generator.type.name} ${description.generator.name}) {
        return ${description.generator.name}.message();
    }

    public static void throwException(${description.generator.type.name} ${description.generator.name}) {
        if(${description.generator.name} == null) throw new NullPointerException("${description.generator.name}");

        throw new ${exceptionName}(createMessage(${description.generator.name}));
    }

    <#if common>
    public static void throwException(ExceptionType exceptionType, ${description.generator.type.name} ${description.generator.name}) {
        throwExceptionForCommonError(exceptionType, createMessage(${description.generator.name}));
    }
    </#if>
    </#if>
</#if>

<#if !root??>
    protected static void throwExceptionForCommonError(ExceptionType exceptionType, String message) {
        throw exceptionType.createException(message);
    }
</#if>
}
