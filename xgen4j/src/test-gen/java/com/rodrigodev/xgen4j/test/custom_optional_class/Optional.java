package com.rodrigodev.xgen4j.test.custom_optional_class;

import java.util.NoSuchElementException;

/**
 * Autogenerated by XGen4J on January 1, 0001.
 */
public class Optional<T> {

    private static final Optional<?> EMPTY = new Optional<>();

    final private T value;

    public Optional() {
        this.value = null;
    }

    public Optional(T value) {
        if (value == null) throw new NullPointerException("value");

        this.value = value;
    }

    public boolean isPresent() {
        return value != null;
    }

    public static <T> Optional<T> empty() {
        @SuppressWarnings("unchecked")
        Optional<T> emptyOptional = (Optional<T>) EMPTY;
        return emptyOptional;
    }

    public static <T> Optional<T> of(T value) {
        return new Optional<>(value);
    }

    public T get() {
        if (value == null) {
            throw new NoSuchElementException("No value present");
        }

        return value;
    }

    @Override
    public int hashCode() {
        return value != null ? value.hashCode() : 0;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof Optional)) {
            return false;
        }
        Optional<?> other = (Optional<?>) obj;

        return (value == other.value) || (value != null && value.equals(other.value));
    }

    @Override
    public String toString() {
        return value != null ? String.format("Optional[%s]", value) : "Optional.empty";
    }
}
