package com.rodrigodev.xgen.test.code.errorCodeEqualityIsBasedOnId_onlyName;

import com.rodrigodev.xgen.test.code.errorCodeEqualityIsBasedOnId_onlyName.ErrorInfo.PlainTextErrorDescription;
import com.rodrigodev.xgen.test.code.errorCodeEqualityIsBasedOnId_onlyName.ErrorInfo.CustomMessageGeneratorErrorDescription;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.concurrent.atomic.AtomicBoolean;

/**
 * Autogenerated by XGen on January 1, 0001.
 */
public class Information {

    private static List<ErrorInfo> errorInfoList;
    private static Map<String, ErrorInfo> idToErrorInfoMap;
    private static Map<String, ErrorInfo> numericIdToErrorInfoMap;

    private static final AtomicBoolean loaded = new AtomicBoolean();

    private static void load() {
        if (loaded.compareAndSet(false, true)) {
            errorInfoList = new ArrayList<>();

            errorInfoList.add(new ErrorInfo(
                com.rodrigodev.xgen.test.code.errorCodeEqualityIsBasedOnId_onlyName.ARootError.class,
                new ExceptionInfo(com.rodrigodev.xgen.test.code.errorCodeEqualityIsBasedOnId_onlyName.ARootException.class),
                com.rodrigodev.xgen.test.code.errorCodeEqualityIsBasedOnId_onlyName.ARootError.CODE,
                false
            ));
            errorInfoList.add(new ErrorInfo(
                com.rodrigodev.xgen.test.code.errorCodeEqualityIsBasedOnId_onlyName.ac1.AC1Error.class,
                new ExceptionInfo(com.rodrigodev.xgen.test.code.errorCodeEqualityIsBasedOnId_onlyName.ac1.AC1Exception.class),
                com.rodrigodev.xgen.test.code.errorCodeEqualityIsBasedOnId_onlyName.ac1.AC1Error.CODE,
                true
            ));
            errorInfoList.add(new ErrorInfo(
                com.rodrigodev.xgen.test.code.errorCodeEqualityIsBasedOnId_onlyName.ac1.ac2.AC2Error.class,
                new ExceptionInfo(com.rodrigodev.xgen.test.code.errorCodeEqualityIsBasedOnId_onlyName.ac1.ac2.AC2Exception.class),
                com.rodrigodev.xgen.test.code.errorCodeEqualityIsBasedOnId_onlyName.ac1.ac2.AC2Error.CODE,
                true
            ));
            errorInfoList.add(new ErrorInfo(
                com.rodrigodev.xgen.test.code.errorCodeEqualityIsBasedOnId_onlyName.ac1.ac2.ac3_1.AC3_1Error.class,
                new ExceptionInfo(com.rodrigodev.xgen.test.code.errorCodeEqualityIsBasedOnId_onlyName.ac1.ac2.ac3_1.AC3_1Exception.class),
                com.rodrigodev.xgen.test.code.errorCodeEqualityIsBasedOnId_onlyName.ac1.ac2.ac3_1.AC3_1Error.CODE,
                true
            ));

            errorInfoList = Collections.unmodifiableList(errorInfoList);
            loaded.set(true);
        }
    }

    public static List<ErrorInfo> list() {
        load();
        return errorInfoList;
    }

    public static ErrorInfo forId(String id) {
        if (id == null) throw new IllegalArgumentException("id");

        load();
        return idToErrorInfoMap.get(id);
    }

    public static ErrorInfo forNumericId(String numericId) {
        if (numericId == null) throw new IllegalArgumentException("numericId");

        load();
        return numericIdToErrorInfoMap.get(numericId);
    }
}
