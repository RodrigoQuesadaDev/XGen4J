package ${packagePath};

import java.util.NoSuchElementException;

/**
 * Autogenerated by XGen4J on ${currentDate}.
 */
public class ${name}<T> {

    private static final ${name}<?> EMPTY = new ${name}<>();

    final private T value;

    public ${name}() {
        this.value = null;
    }

    public ${name}(T value) {
        if (value == null) throw new NullPointerException("value");

        this.value = value;
    }

    public boolean isPresent() {
        return value != null;
    }

    public static <T> ${name}<T> empty() {
        @SuppressWarnings("unchecked")
        ${name}<T> empty${name} = (${name}<T>) EMPTY;
        return empty${name};
    }

    public static <T> ${name}<T> of(T value) {
        return new ${name}<>(value);
    }

    public T get() {
        if (value == null) {
            throw new NoSuchElementException("No value present");
        }

        return value;
    }

    @Override
    public int hashCode() {
        return value != null ? value.hashCode() : 0;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof ${name})) {
            return false;
        }
        ${name}<?> other = (${name}<?>) obj;

        return (value == other.value) || (value != null && value.equals(other.value));
    }

    @Override
    public String toString() {
        return value != null ? String.format("${name}[%s]", value) : "${name}.empty";
    }
}
