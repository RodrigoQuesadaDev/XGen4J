package ${packagePath};

<#if parent??>import ${parent.canonicalName};</#if>
<#if !root>
import ${rootClass.canonicalName};
import ${rootClass.packagePath}.ErrorCode;
</#if>

/**
 * Autogenerated by XGen4J on ${currentDate}.
 */
public class ${name} extends <#if parent??>${parent.name}<#elseif checkedException>Exception<#else>RuntimeException</#if> {

    <#if hasType>
    public static final ExceptionType TYPE = new ExceptionType();

    </#if>
    <#if root>
    final private ErrorCode errorCode;

    protected ${name}(ErrorCode errorCode, String message) {
        super(message);
        this.errorCode = errorCode;
    }

    protected ${name}(ErrorCode errorCode, String message, Throwable cause) {
        super(message, cause);
        this.errorCode = errorCode;
    }

    public ErrorCode errorCode() {
        return errorCode;
    }

    public abstract static class ExceptionType {

        protected ExceptionType() {
        }

        protected abstract ${name} createException(ErrorCode errorCode, String message);

        protected abstract ${name} createException(ErrorCode errorCode, String message, Throwable cause);
    }
    <#else>
    protected ${name}(ErrorCode errorCode, String message) {
        super(errorCode, message);
    }

    protected ${name}(ErrorCode errorCode, String message, Throwable cause) {
        super(errorCode, message, cause);
    }
    <#if !common>

    private static class ExceptionType extends ${rootClass.name}.ExceptionType {

        @Override
        protected ${rootClass.name} createException(ErrorCode errorCode, String message) {
            return new ${name}(errorCode, message);
        }

        @Override
        protected ${rootClass.name} createException(ErrorCode errorCode, String message, Throwable cause) {
            return new ${name}(errorCode, message, cause);
        }
    }
    </#if>
    </#if>
}
